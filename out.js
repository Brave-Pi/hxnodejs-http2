// Generated by Haxe 4.1.2
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Attribute = $hxEnums["Attribute"] = { __ename__ : true, __constructs__ : ["Off","Bold","Underline","Blink","ReverseVideo","Concealed","BoldOff","UnderlineOff","BlinkOff","NormalVideo","ConcealedOff","Black","Red","Green","Yellow","Blue","Magenta","Cyan","White","DefaultForeground","BlackBack","RedBack","GreenBack","YellowBack","BlueBack","MagentaBack","CyanBack","WhiteBack","DefaultBackground"]
	,Off: {_hx_index:0,__enum__:"Attribute",toString:$estr}
	,Bold: {_hx_index:1,__enum__:"Attribute",toString:$estr}
	,Underline: {_hx_index:2,__enum__:"Attribute",toString:$estr}
	,Blink: {_hx_index:3,__enum__:"Attribute",toString:$estr}
	,ReverseVideo: {_hx_index:4,__enum__:"Attribute",toString:$estr}
	,Concealed: {_hx_index:5,__enum__:"Attribute",toString:$estr}
	,BoldOff: {_hx_index:6,__enum__:"Attribute",toString:$estr}
	,UnderlineOff: {_hx_index:7,__enum__:"Attribute",toString:$estr}
	,BlinkOff: {_hx_index:8,__enum__:"Attribute",toString:$estr}
	,NormalVideo: {_hx_index:9,__enum__:"Attribute",toString:$estr}
	,ConcealedOff: {_hx_index:10,__enum__:"Attribute",toString:$estr}
	,Black: {_hx_index:11,__enum__:"Attribute",toString:$estr}
	,Red: {_hx_index:12,__enum__:"Attribute",toString:$estr}
	,Green: {_hx_index:13,__enum__:"Attribute",toString:$estr}
	,Yellow: {_hx_index:14,__enum__:"Attribute",toString:$estr}
	,Blue: {_hx_index:15,__enum__:"Attribute",toString:$estr}
	,Magenta: {_hx_index:16,__enum__:"Attribute",toString:$estr}
	,Cyan: {_hx_index:17,__enum__:"Attribute",toString:$estr}
	,White: {_hx_index:18,__enum__:"Attribute",toString:$estr}
	,DefaultForeground: {_hx_index:19,__enum__:"Attribute",toString:$estr}
	,BlackBack: {_hx_index:20,__enum__:"Attribute",toString:$estr}
	,RedBack: {_hx_index:21,__enum__:"Attribute",toString:$estr}
	,GreenBack: {_hx_index:22,__enum__:"Attribute",toString:$estr}
	,YellowBack: {_hx_index:23,__enum__:"Attribute",toString:$estr}
	,BlueBack: {_hx_index:24,__enum__:"Attribute",toString:$estr}
	,MagentaBack: {_hx_index:25,__enum__:"Attribute",toString:$estr}
	,CyanBack: {_hx_index:26,__enum__:"Attribute",toString:$estr}
	,WhiteBack: {_hx_index:27,__enum__:"Attribute",toString:$estr}
	,DefaultBackground: {_hx_index:28,__enum__:"Attribute",toString:$estr}
};
var Sys = function() { };
Sys.__name__ = "Sys";
Sys.systemName = function() {
	var _g = process.platform;
	switch(_g) {
	case "darwin":
		return "Mac";
	case "freebsd":
		return "BSD";
	case "linux":
		return "Linux";
	case "win32":
		return "Windows";
	default:
		var other = _g;
		return other;
	}
};
var js_node_ChildProcess = require("child_process");
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var ANSI = function() { };
ANSI.__name__ = "ANSI";
ANSI.aset = function(attributes) {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	var tmp = "\x1B" + "[";
	var _g = [];
	var _g1 = 0;
	while(_g1 < attributes.length) {
		var arg = attributes[_g1];
		++_g1;
		if(!js_Boot.__instanceof(arg,Attribute)) {
			throw haxe_Exception.thrown("Set argument is not an Attribute: " + Std.string(arg));
		}
		_g.push(ANSI.values.get(arg));
	}
	return tmp + _g.join(";") + "m";
};
ANSI.detectSupport = function() {
	if(Sys.systemName().toLowerCase().indexOf("window") == -1) {
		var result = -1;
		try {
			result = js_node_ChildProcess.spawnSync("tput",["colors"]).error == null ? 0 : 125;
		} catch( _g ) {
		}
		return result == 0;
	} else {
		return process.env["ANSICON"] != null;
	}
};
ANSI.title = function(str) {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B" + "]0;" + str + "\x07";
};
ANSI.showCursor = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[?25h";
};
ANSI.setY = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "d";
};
ANSI.setXY = function(column,line) {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + line + ";" + column + "H";
};
ANSI.setX = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "G";
};
ANSI.saveCursor = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[s";
};
ANSI.resetY = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "H";
};
ANSI.reset = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[H";
};
ANSI.moveUpReset = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "F";
};
ANSI.moveUp = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "A";
};
ANSI.moveRight = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "C";
};
ANSI.moveLeft = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "D";
};
ANSI.moveDownReset = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "E";
};
ANSI.moveDown = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "B";
};
ANSI.loadCursor = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[u";
};
ANSI.insertLines = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "L";
};
ANSI.insertLine = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[L";
};
ANSI.insertChars = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "@";
};
ANSI.insertChar = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[@";
};
ANSI.hideCursor = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[?25l";
};
ANSI.eraseLineToEnd = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[K";
};
ANSI.eraseLineToCursor = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[1K";
};
ANSI.eraseLine = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[2K";
};
ANSI.eraseDisplayToEnd = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[J";
};
ANSI.eraseDisplayToCursor = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[1J";
};
ANSI.eraseDisplay = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[2J";
};
ANSI.eraseChars = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "X";
};
ANSI.eraseChar = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[X";
};
ANSI.deleteLines = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "M";
};
ANSI.deleteLine = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[M";
};
ANSI.deleteChars = function(num) {
	if(num == null) {
		num = 1;
	}
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[" + num + "P";
};
ANSI.deleteChar = function() {
	if(ANSI.strip || ANSI.stripIfUnavailable && !ANSI.available) {
		return "";
	}
	return "\x1B[P";
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = "Math";
var RunTests = function() { };
RunTests.__name__ = "RunTests";
RunTests.main = function() {
	var this1 = [new tink_unit_TestSuiteBuilder0(new Test(),null)];
	tink_testrunner_Runner.run(this1).handle(tink_testrunner_Runner.exit);
};
var Test = function() {
};
Test.__name__ = "Test";
Test.prototype = {
	create_http2_server: function(asserts) {
		var onRequest = new tink_core_FutureTrigger();
		this.gotRequest = onRequest;
		var assertion;
		try {
			this.server = js_node_http2_Constants.createSecureServer({ cert : js_node_Fs.readFileSync("./localhost-cert.pem"), key : js_node_Fs.readFileSync("./localhost-privkey.pem"), allowHTTP1 : true},function(req,res) {
				res.writeHead(200,"OK");
				res.end("<h1>Hello, World</h1>");
				res.stream.on("close",function() {
					onRequest.trigger(tink_core_Noise.Noise);
				});
			});
			assertion = tink_testrunner_AssertionResult.ofBool(true);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			console.log("bp/test/Utils.hx:5:",e);
			assertion = tink_testrunner_AssertionResult.ofBool(false);
		}
		var assertion1 = new tink_testrunner_Assertion(assertion,"({\n\tserver = Http2.createSecureServer({ cert : js.node.Fs.readFileSync('./localhost-cert.pem'), key : js.node.Fs.readFileSync('./localhost-privkey.pem'), allowHTTP1 : true }, (req, res) -> {\n\t\tres.writeHead(200, \"OK\");\n\t\tres.end(\"<h1>Hello, World</h1>\");\n\t\tres.stream.on('close', () -> onRequest.trigger(Noise));\n\t\tNoise;\n\t});\n}).attempt(true)",{ fileName : "test/RunTests.hx", lineNumber : 27, className : "Test", methodName : "create_http2_server"});
		asserts.trigger.handlers.invoke(tink_streams_Yield.Data(assertion1));
		return assertion1;
	}
	,http2_listen: function(asserts) {
		var assertion;
		try {
			this.server.listen(8080);
			console.log("test/RunTests.hx:44:","Listening on port 8080");
			assertion = tink_testrunner_AssertionResult.ofBool(true);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			console.log("bp/test/Utils.hx:5:",e);
			assertion = tink_testrunner_AssertionResult.ofBool(false);
		}
		var assertion1 = new tink_testrunner_Assertion(assertion,"({\n\tserver.listen(8080);\n\ttrace('Listening on port 8080');\n\tNoise;\n}).attempt(true)",{ fileName : "test/RunTests.hx", lineNumber : 42, className : "Test", methodName : "http2_listen"});
		asserts.trigger.handlers.invoke(tink_streams_Yield.Data(assertion1));
		return assertion1;
	}
	,wait_for_request: function(asserts) {
		tink_core_Future.next(this.gotRequest,function(_) {
			var assertion = new tink_testrunner_Assertion(tink_testrunner_AssertionResult.ofBool(true),"true",{ fileName : "test/RunTests.hx", lineNumber : 52, className : "Test", methodName : "wait_for_request"});
			asserts.trigger.handlers.invoke(tink_streams_Yield.Data(assertion));
			asserts.trigger.handlers.invoke(tink_streams_Yield.End);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(asserts)));
		});
		return asserts;
	}
	,__class__: Test
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = "haxe.io.Output";
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = "_Sys.FileOutput";
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = "haxe.io.Input";
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = "_Sys.FileInput";
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var Type = function() { };
Type.__name__ = "Type";
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var bp_test_Utils = function() { };
bp_test_Utils.__name__ = "bp.test.Utils";
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_macro_Printer = function(tabString) {
	if(tabString == null) {
		tabString = "\t";
	}
	this.tabs = "";
	this.tabString = tabString;
};
haxe_macro_Printer.__name__ = "haxe.macro.Printer";
haxe_macro_Printer.prototype = {
	__class__: haxe_macro_Printer
};
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_http2_Constants = require("http2");
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	var this1 = [name,value];
	return this1;
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = "tink.core.Annex";
tink_core_Annex.prototype = {
	__class__: tink_core_Annex
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		var _e = this1;
		var _g = function(data) {
			tink_core_Callback.invoke(_e,data);
		};
		var data1 = data;
		tink_core_Callback.defer(function() {
			_g(data1);
		});
	}
};
tink_core_Callback.ignore = function(cb) {
	return function(_) {
		tink_core_Callback.invoke(cb,tink_core_Noise.Noise);
	};
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core_Callback.invoke(callback,v);
		}
	};
};
tink_core_Callback.defer = function(f) {
	process.nextTick(f);
};
var tink_core_LinkObject = function() { };
tink_core_LinkObject.__name__ = "tink.core.LinkObject";
tink_core_LinkObject.__isInterface__ = true;
tink_core_LinkObject.prototype = {
	__class__: tink_core_LinkObject
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	var this1 = new tink_core_SimpleLink(link);
	return this1;
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	return function(_) {
		this1.cancel();
	};
};
tink_core_CallbackLink.fromFunction = function(f) {
	var this1 = new tink_core_SimpleLink(f);
	return this1;
};
tink_core_CallbackLink.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	var this1 = new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
	return this1;
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
tink_core_SimpleLink.__name__ = "tink.core.SimpleLink";
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = "tink.core._Callback.LinkPair";
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = "tink.core._Callback.ListCell";
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	invoke: function(data) {
		if(this.list != null) {
			tink_core_Callback.invoke(this.cb,data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used < list.used >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_CallbackList = function() {
	this.busy = false;
	this.queue = [];
	this.used = 0;
	this.cells = [];
};
tink_core_CallbackList.__name__ = "tink.core.CallbackList";
tink_core_CallbackList.prototype = {
	ondrain: function() {
	}
	,get_length: function() {
		return this.used;
	}
	,release: function() {
		if(--this.used < this.used >> 1) {
			this.compact();
		}
	}
	,add: function(cb) {
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		this.used++;
		return node;
	}
	,invoke: function(data,destructive) {
		if(this.busy) {
			var _g = $bind(this,this.invoke);
			var data1 = data;
			var destructive1 = destructive;
			var tmp = function() {
				_g(data1,destructive1);
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			var length = this.cells.length;
			var _g1 = 0;
			var _g2 = length;
			while(_g1 < _g2) {
				var i = _g1++;
				var _this = this.cells[i];
				if(_this.list != null) {
					tink_core_Callback.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				var added = this.cells.length - length;
				var _g1 = 0;
				var _g2 = length;
				while(_g1 < _g2) {
					var i = _g1++;
					var _this = this.cells[i];
					_this.cb = null;
					_this.list = null;
				}
				var _g1 = 0;
				var _g2 = added;
				while(_g1 < _g2) {
					var i = _g1++;
					this.cells[i] = this.cells[length + i];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g3 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = "tink.core.TypedError";
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		var _g1 = tink_core_TypedError.asError(e);
		var tmp;
		if(_g1 == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e,pos) : report(e);
		} else {
			var e = _g1;
			tmp = e;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		var any = this;
		throw haxe_Exception.thrown(any);
	}
	,__class__: tink_core_TypedError
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core_FutureObject = function() { };
tink_core_FutureObject.__name__ = "tink.core.FutureObject";
tink_core_FutureObject.__isInterface__ = true;
tink_core_FutureObject.prototype = {
	__class__: tink_core_FutureObject
};
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = "tink.core._Future.NeverFuture";
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	map: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,flatMap: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,handle: function(callback) {
		return null;
	}
	,gather: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,eager: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = "tink.core._Lazy.LazyObject";
tink_core__$Lazy_LazyObject.__isInterface__ = true;
tink_core__$Lazy_LazyObject.prototype = {
	__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = "tink.core._Lazy.LazyConst";
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = "tink.core._Future.SyncFuture";
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return f(_gthis.value.get()).handle($yield);
		});
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Future = {};
tink_core_Future._new = function(f) {
	var this1 = new tink_core__$Future_SuspendableFuture(f);
	return this1;
};
tink_core_Future.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this1 = l1;
		ret1.handle(function(_) {
			this1.cancel();
		});
	}
	if(l2 != null) {
		var this2 = l2;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	return ret1;
};
tink_core_Future.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core_Future.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(t) {
		var gather = false;
		if(gather == null) {
			gather = true;
		}
		var ret = other.map(function(a) {
			return merger(t,a);
		});
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatten = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		var inner = null;
		var outer = f.handle(function(second) {
			inner = second.handle($yield);
		});
		var this1 = new tink_core_SimpleLink(function() {
			if(inner != null) {
				inner.cancel();
			}
		});
		return new tink_core__$Callback_LinkPair(outer,this1);
	});
};
tink_core_Future.ofJsPromise = function(promise) {
	return tink_core_Future.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		}).catch(function(e) {
			cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 89, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
		});
	});
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) {
		var f = [futures[_g]];
		++_g;
		var gather1 = false;
		if(gather1 == null) {
			gather1 = true;
		}
		var ret1 = ret.flatMap((function(f) {
			return function(results) {
				var gather = false;
				if(gather == null) {
					gather = true;
				}
				var ret = f[0].map((function() {
					return function(result) {
						return results.concat([result]);
					};
				})());
				if(gather) {
					return ret.gather();
				} else {
					return ret;
				}
			};
		})(f));
		ret = gather1 ? ret1.gather() : ret1;
	}
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.fromMany = function(futures) {
	return tink_core_Future.ofMany(futures);
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return js_Boot.__implements(maybeFuture,tink_core_FutureObject);
};
tink_core_Future.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			f($yield);
			return null;
		});
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core_Callback.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	var gather = false;
	if(gather == null) {
		gather = true;
	}
	var ret = a.map(haxe_ds_Either.Left);
	var tmp = gather ? ret.gather() : ret;
	var gather = false;
	if(gather == null) {
		gather = true;
	}
	var ret = b.map(haxe_ds_Either.Right);
	return tink_core_Future.first(tmp,gather ? ret.gather() : ret);
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var ret = map(d).map(tink_core_Outcome.Success);
			return ret.gather();
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFailingMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
	return ret.gather();
};
tink_core_Future._tryMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
	return ret.gather();
};
tink_core_Future._flatMap = function(f,map) {
	var ret = f.flatMap(map);
	return ret.gather();
};
tink_core_Future._map = function(f,map) {
	var ret = f.map(map);
	return ret.gather();
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	return tink_core_Future.async(function(cb) {
		haxe_Timer.delay(function() {
			cb(value.get());
		},ms);
	});
};
var tink_core_FutureTrigger = function() {
	this.list = new tink_core_CallbackList();
};
tink_core_FutureTrigger.__name__ = "tink.core.FutureTrigger";
tink_core_FutureTrigger.__interfaces__ = [tink_core_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		return f.handle($yield);
	});
};
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var node = new tink_core__$Callback_ListCell(callback,v);
			v.cells.push(node);
			v.used++;
			return node;
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				ret.trigger(f(v));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				f(v).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = "tink.core.JsPromiseTools";
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.suspended = true;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList();
	this.callbacks.ondrain = function() {
		if(_gthis.callbacks != null) {
			_gthis.suspended = true;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
};
tink_core__$Future_SuspendableFuture.__name__ = "tink.core._Future.SuspendableFuture";
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SuspendableFuture.prototype = {
	trigger: function(value) {
		var _g = this.callbacks;
		if(_g != null) {
			var list = _g;
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			list.invoke(value,true);
		}
	}
	,handle: function(callback) {
		var _g = this.callbacks;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var _this = this.callbacks;
			var node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			_this.used++;
			var ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				$yield(f(res));
			});
		});
	}
	,flatMap: function(f) {
		return tink_core_Future.flatten(this.map(f));
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		this.handle(tink_core_Callback.fromNiladic(function() {
		}));
		return this;
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_core_Lazy = {};
tink_core_Lazy.get = function(this1) {
	return this1.get();
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return this1.map(f);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = "tink.core._Lazy.LazyFunc";
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get());
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get()).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = "tink.core.NamedWith";
tink_core_NamedWith.prototype = {
	__class__: tink_core_NamedWith
};
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = "tink.core.OptionTools";
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return l.get();
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = "tink.core.OptionIter";
tink_core_OptionIter.prototype = {
	hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = "tink.core.OutcomeTools";
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw haxe_Exception.thrown(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		var _g = outcome.failure;
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option._hx_index) {
	case 0:
		var value = option.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 48, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var _g = outcome.data;
		return outcome;
	case 1:
		var _g = outcome.failure;
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		var _g = outcome.failure;
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		var _g = outcome.data;
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		return f(v);
	case 1:
		var e = outcome.failure;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		return tink_core_Outcome.Failure(report(e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			var d = _g.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = _g.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f = o.failure;
		return tink_core_Outcome.Failure(f);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f1));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = "tink.core.MPair";
tink_core_MPair.prototype = {
	__class__: tink_core_MPair
};
var tink_core_Progress = {};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	var value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	var signal = tink_core_Signal.trigger();
	var future = tink_core_Future.async(function(cb) {
		var progress = function(v,total) {
			switch(value._hx_index) {
			case 0:
				var current = value.v;
				if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
					var this1 = new tink_core_MPair(v,total);
					var pv = this1;
					value = tink_core_ProgressType.InProgress(pv);
					signal.handlers.invoke(pv);
				}
				break;
			case 1:
				var _g = value.v;
				break;
			}
		};
		var finish = function(v) {
			if(value._hx_index == 1) {
				var _g = value.v;
			} else {
				value = tink_core_ProgressType.Finished(v);
				cb(v);
			}
		};
		f(progress,finish);
	});
	return new tink_core_CompositeProgress(future,signal);
};
tink_core_Progress.asFuture = function(this1) {
	return this1;
};
tink_core_Progress.asPromise = function(p) {
	return p;
};
tink_core_Progress.promise = function(v) {
	return new tink_core_PromiseProgress(v);
};
tink_core_Progress.future = function(v) {
	return new tink_core_FutureProgress(v);
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.next(this1,f);
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = "tink.core.SignalObject";
tink_core_SignalObject.__isInterface__ = true;
tink_core_SignalObject.prototype = {
	__class__: tink_core_SignalObject
};
var tink_core_ProgressObject = function() { };
tink_core_ProgressObject.__name__ = "tink.core.ProgressObject";
tink_core_ProgressObject.__isInterface__ = true;
tink_core_ProgressObject.__interfaces__ = [tink_core_SignalObject,tink_core_FutureObject];
var tink_core_CompositeProgress = function(future,signal) {
	this.future = future;
	this.signal = signal;
};
tink_core_CompositeProgress.__name__ = "tink.core.CompositeProgress";
tink_core_CompositeProgress.__interfaces__ = [tink_core_ProgressObject];
tink_core_CompositeProgress.prototype = {
	map: function(f) {
		var ret = this.future.map(f);
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.future.flatMap(f);
		return ret.gather();
	}
	,handle: function(callback) {
		return this.future.handle(callback);
	}
	,listen: function(callback) {
		return this.signal.listen(callback);
	}
	,gather: function() {
		return this.future.gather();
	}
	,eager: function() {
		return this.future.eager();
	}
	,__class__: tink_core_CompositeProgress
};
var tink_core_ProgressTrigger = function() {
	this.value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	tink_core_CompositeProgress.call(this,this.futureTrigger = new tink_core_FutureTrigger(),this.signalTrigger = tink_core_Signal.trigger());
};
tink_core_ProgressTrigger.__name__ = "tink.core.ProgressTrigger";
tink_core_ProgressTrigger.__super__ = tink_core_CompositeProgress;
tink_core_ProgressTrigger.prototype = $extend(tink_core_CompositeProgress.prototype,{
	progress: function(v,total) {
		var _g = this.value;
		switch(_g._hx_index) {
		case 0:
			var current = _g.v;
			if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
				var this1 = new tink_core_MPair(v,total);
				var pv = this1;
				this.value = tink_core_ProgressType.InProgress(pv);
				this.signalTrigger.handlers.invoke(pv);
			}
			break;
		case 1:
			var _g1 = _g.v;
			break;
		}
	}
	,finish: function(v) {
		var _g = this.value;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
		} else {
			this.value = tink_core_ProgressType.Finished(v);
			this.futureTrigger.trigger(v);
		}
	}
	,asProgress: function() {
		return this;
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_FutureProgress = function(future) {
	var ret = future.flatMap(function(progress) {
		return progress;
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		future.handle(function(progress) {
			progress.listen(cb);
		});
	}));
};
tink_core_FutureProgress.__name__ = "tink.core.FutureProgress";
tink_core_FutureProgress.__super__ = tink_core_CompositeProgress;
tink_core_FutureProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_FutureProgress
});
var tink_core_PromiseProgress = function(promise) {
	var ret = promise.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var progress = o.data;
			return progress.map(tink_core_Outcome.Success);
		case 1:
			var e = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		promise.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var progress = o.data;
				progress.listen(cb);
				break;
			case 1:
				var e = o.failure;
				break;
			}
		});
	}));
};
tink_core_PromiseProgress.__name__ = "tink.core.PromiseProgress";
tink_core_PromiseProgress.__super__ = tink_core_CompositeProgress;
tink_core_PromiseProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_PromiseProgress
});
var tink_core_ProgressValue = {};
tink_core_ProgressValue._new = function(value,total) {
	var this1 = new tink_core_MPair(value,total);
	var this2 = this1;
	return this2;
};
tink_core_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(this1.a / v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_core_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else {
		var i = _g;
		if(s.length - i > dp) {
			return HxOverrides.substr(s,0,dp + i + 1) + "%";
		} else {
			var i = _g;
			return StringTools.rpad(s,"0",i + dp + 1) + "%";
		}
	}
};
var tink_core_ProgressType = $hxEnums["tink.core.ProgressType"] = { __ename__ : true, __constructs__ : ["InProgress","Finished"]
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var tink_core_TotalTools = function() { };
tink_core_TotalTools.__name__ = "tink.core.TotalTools";
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			var t1 = a.v;
			var t2 = b.v;
			return t1 == t2;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var this1 = tink_core_Future.async(function(cb) {
		f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	},lazy);
	return this1;
};
tink_core_Promise.eager = function(this1) {
	return this1.eager();
};
tink_core_Promise.map = function(this1,f) {
	var ret = this1.map(f);
	return ret.gather();
};
tink_core_Promise.flatMap = function(this1,f) {
	var ret = this1.flatMap(f);
	return ret.gather();
};
tink_core_Promise.tryRecover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core_Promise.recover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core_Promise.mapError = function(this1,f) {
	var ret = this1.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
	return ret.gather();
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	return tink_core_Promise.next(this1,function(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	});
};
tink_core_Promise.isSuccess = function(this1) {
	var ret = this1.map(function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
	return ret.gather();
};
tink_core_Promise.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Future._tryMap(this1,function(_) {
		return v;
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core_Promise.next(this1,function(t) {
		return tink_core_Promise.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback,lazy) {
	return tink_core_Future.async(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									var ret = _g.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e = o.failure;
						cb(tink_core_Outcome.Failure(e));
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	},lazy);
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		var hrtime = process.hrtime();
		return (hrtime[0] + hrtime[1] / 1e9) * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		};
		var ret = gen().flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				resolve(v);
				break;
			case 1:
				var e = o.failure;
				reject(new tink_core__$Promise_TinkError(e));
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.ofFuture = function(f) {
	var ret = f.map(tink_core_Outcome.Success);
	return ret.gather();
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.lazy = function(p) {
	return tink_core_Future.async(function(cb) {
		p.get().handle(cb);
	},true);
};
tink_core_Promise.inParallel = function(a,concurrency,lazy) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
	} else {
		return tink_core_Future.async(function(cb) {
			var result = [];
			var pending = a.length;
			var links = null;
			var linkArray = [];
			var sync = false;
			var i = 0;
			var iter_current;
			var iter_array;
			iter_current = 0;
			iter_array = a;
			var next = null;
			var done = function(o) {
				if(links == null) {
					sync = true;
				} else if(links != null) {
					links.cancel();
				}
				cb(o);
			};
			var fail = function(e) {
				pending = 0;
				done(tink_core_Outcome.Failure(e));
			};
			var set = function(index,value) {
				result[index] = value;
				if((pending -= 1) == 0) {
					done(tink_core_Outcome.Success(result));
				} else if(iter_current < iter_array.length && pending > 0) {
					next();
				}
			};
			next = function() {
				i += 1;
				var index = i - 1;
				iter_current += 1;
				linkArray.push(iter_array[iter_current - 1].handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						set(index,v);
						break;
					case 1:
						var e = o.failure;
						fail(e);
						break;
					}
				}));
			};
			while(true) {
				var tmp;
				if(iter_current < iter_array.length && pending > 0) {
					if(concurrency != null) {
						concurrency -= 1;
						tmp = concurrency + 1 > 0;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				next();
			}
			links = tink_core_CallbackLink.fromMany(linkArray);
			if(sync) {
				if(links != null) {
					links.cancel();
				}
			}
		},lazy);
	}
};
tink_core_Promise.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core_Promise.next(a[index],function(head) {
				return tink_core_Promise.next(loop(index + 1),function(tail) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
				});
			});
		}
	};
	return loop(0);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		var ret1 = ret.map(function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
		return ret1.gather();
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		var ret = f(x).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		var ret = f(x1,x2).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core__$Promise_TinkError = function(e) {
	Error.call(this,e.message);
	this.data = e;
};
tink_core__$Promise_TinkError.__name__ = "tink.core._Promise.TinkError";
tink_core__$Promise_TinkError.__super__ = Error;
tink_core__$Promise_TinkError.prototype = $extend(Error.prototype,{
	__class__: tink_core__$Promise_TinkError
});
var tink_core_Ref = {};
tink_core_Ref._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
tink_core_Ref.get_value = function(this1) {
	return this1[0];
};
tink_core_Ref.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core_Ref.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f) {
	var this1 = new tink_core__$Signal_SimpleSignal(f);
	return this1;
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			tink_core_Callback.invoke(cb,f(result));
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			f(result).handle(cb);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			if(f(result)) {
				tink_core_Callback.invoke(cb,result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.select = function(this1,selector,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			var _g = selector(result);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				tink_core_Callback.invoke(cb,v);
				break;
			case 1:
				break;
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.listen(cb),other.listen(cb));
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.listen(function(v) {
		if(condition == null || condition(v)) {
			ret.trigger(v);
			if(link == null) {
				immediate = true;
			} else if(link != null) {
				link.cancel();
			}
		}
	});
	if(immediate) {
		if(link != null) {
			link.cancel();
		}
	}
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	var ret = new tink_core__$Signal_Suspendable(function($yield) {
		var this2 = this1.listen($yield);
		if(this2 == null) {
			return tink_core_CallbackLink.noop;
		} else {
			return $bind(this2,this2.cancel);
		}
	});
	end.handle(tink_core_Callback.fromNiladic($bind(ret,ret.kill)));
	return ret;
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core_Signal.gather = function(this1) {
	var ret = tink_core_Signal.trigger();
	this1.listen(function(x) {
		ret.handlers.invoke(x);
	});
	return ret;
};
tink_core_Signal.generate = function(generator) {
	var ret = tink_core_Signal.trigger();
	generator($bind(ret,ret.trigger));
	return ret;
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.create = function(create) {
	return new tink_core__$Signal_Suspendable(create);
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			tink_core_Callback.invoke(cb,a);
		};
		add(f);
		var _g = remove;
		var a1 = f;
		var this1 = new tink_core_SimpleLink(function() {
			_g(a1);
		});
		return this1;
	});
	var ret = this1;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
tink_core__$Signal_SimpleSignal.__name__ = "tink.core._Signal.SimpleSignal";
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	listen: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var tink_core__$Signal_Suspendable = function(activate) {
	this.killed = false;
	this.trigger = new tink_core_SignalTrigger();
	this.activate = activate;
};
tink_core__$Signal_Suspendable.__name__ = "tink.core._Signal.Suspendable";
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_Suspendable.prototype = {
	kill: function() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	,listen: function(cb) {
		var _gthis = this;
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.used == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var _this = this.trigger.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		var this1 = new tink_core_SimpleLink(function() {
			if(_gthis.trigger.handlers.used == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(node,this1);
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger";
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		return node;
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
var tink_streams_IdealStream = {};
tink_streams_IdealStream.promiseOfIdealStream = function(p) {
	return tink_streams_Stream.promise(tink_core_Promise.ofSpecific(p));
};
tink_streams_IdealStream.promiseOfStreamNoise = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_IdealStream.collect = function(this1) {
	var buf = [];
	var ret = this1.forEach(tink_streams_Handler.ofSafe(function(x) {
		buf.push(x);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
	})).map(function(c) {
		return buf;
	});
	return ret.gather();
};
var tink_streams_StreamObject = function() { };
tink_streams_StreamObject.__name__ = "tink.streams.StreamObject";
tink_streams_StreamObject.__isInterface__ = true;
tink_streams_StreamObject.prototype = {
	__class__: tink_streams_StreamObject
};
var tink_streams_StreamBase = function() {
	this.retainCount = 0;
};
tink_streams_StreamBase.__name__ = "tink.streams.StreamBase";
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
tink_streams_StreamBase.prototype = {
	get_depleted: function() {
		return false;
	}
	,retain: function() {
		var _gthis = this;
		this.retainCount++;
		var retained = true;
		return function() {
			if(retained) {
				retained = false;
				if(--_gthis.retainCount == 0) {
					_gthis.destroy();
				}
			}
		};
	}
	,next: function() {
		throw haxe_Exception.thrown("not implemented");
	}
	,regroup: function(f) {
		return new tink_streams__$Stream_RegroupStream(this,f);
	}
	,map: function(f) {
		return this.regroup(f);
	}
	,filter: function(f) {
		return this.regroup(f);
	}
	,destroy: function() {
	}
	,append: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([this,other]);
		}
	}
	,prepend: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([other,this]);
		}
	}
	,blend: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return new tink_streams_BlendStream(this,other);
		}
	}
	,decompose: function(into) {
		if(!this.get_depleted()) {
			into.push(this);
		}
	}
	,idealize: function(rescue) {
		if(this.get_depleted()) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams_IdealizeStream(this,rescue);
		}
	}
	,reduce: function(initial,reducer) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.forEach(tink_streams_Handler.ofUnknown(function(item) {
				var ret = reducer(initial,item).map(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.result;
						initial = v;
						return tink_streams_Handled.Resume;
					case 1:
						var e = o.e;
						return tink_streams_Handled.Clog(e);
					}
				});
				return ret.gather();
			})).handle(function(c) {
				switch(c._hx_index) {
				case 0:
					var _g = c.rest;
					throw haxe_Exception.thrown("assert");
				case 1:
					var rest = c.at;
					var e = c.error;
					cb(tink_streams_Reduction.Crashed(e,rest));
					break;
				case 2:
					var e = c.error;
					cb(tink_streams_Reduction.Failed(e));
					break;
				case 3:
					cb(tink_streams_Reduction.Reduced(initial));
					break;
				}
			});
		},true);
	}
	,forEach: function(handler) {
		throw haxe_Exception.thrown("not implemented");
	}
	,__class__: tink_streams_StreamBase
};
var tink_streams_IdealStreamBase = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_IdealStreamBase.__name__ = "tink.streams.IdealStreamBase";
tink_streams_IdealStreamBase.__super__ = tink_streams_StreamBase;
tink_streams_IdealStreamBase.prototype = $extend(tink_streams_StreamBase.prototype,{
	idealize: function(rescue) {
		return this;
	}
	,__class__: tink_streams_IdealStreamBase
});
var tink_streams_RealStream = {};
tink_streams_RealStream.promiseOfIdealStream = function(p) {
	return tink_streams_Stream.promise(tink_core_Promise.ofSpecific(p));
};
tink_streams_RealStream.promiseOfStreamNoise = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_RealStream.promiseOfRealStream = function(p) {
	return tink_streams_Stream.promise(tink_core_Promise.ofSpecific(p));
};
tink_streams_RealStream.promiseOfStreamError = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_RealStream.collect = function(this1) {
	var buf = [];
	var ret = this1.forEach(tink_streams_Handler.ofSafe(function(x) {
		buf.push(x);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
	})).map(function(c) {
		switch(c._hx_index) {
		case 0:
			var _g = c.rest;
			throw haxe_Exception.thrown("unreachable");
		case 2:
			var e = c.error;
			return tink_core_Outcome.Failure(e);
		case 3:
			return tink_core_Outcome.Success(buf);
		}
	});
	return ret.gather();
};
var tink_streams_Stream = {};
tink_streams_Stream.get_depleted = function(this1) {
	return this1.get_depleted();
};
tink_streams_Stream.dirty = function(this1) {
	return this1;
};
tink_streams_Stream.single = function(i) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(i));
};
tink_streams_Stream.ofIterator = function(i) {
	var next = null;
	next = function(step) {
		step(i.hasNext() ? tink_streams_Step.Link(i.next(),tink_streams_Generator.stream(next)) : tink_streams_Step.End);
	};
	return tink_streams_Generator.stream(next);
};
tink_streams_Stream.flatten = function(f) {
	return new tink_streams_FutureStream(f);
};
tink_streams_Stream.promiseIdeal = function(f) {
	return tink_streams_Stream.promise(tink_core_Promise.ofSpecific(f));
};
tink_streams_Stream.promiseReal = function(f) {
	return tink_streams_Stream.promise(tink_core_Promise.ofSpecific(f));
};
tink_streams_Stream.promise = function(f) {
	var ret = f.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var s = o.data;
			return tink_streams_Stream.dirty(s);
		case 1:
			var e = o.failure;
			return tink_streams_Stream.ofError(e);
		}
	});
	return tink_streams_Stream.flatten(ret.gather());
};
tink_streams_Stream.ofError = function(e) {
	return new tink_streams__$Stream_ErrorStream(e);
};
var tink_streams_RegroupStatus = $hxEnums["tink.streams.RegroupStatus"] = { __ename__ : true, __constructs__ : ["Flowing","Errored","Ended"]
	,Flowing: {_hx_index:0,__enum__:"tink.streams.RegroupStatus",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.RegroupStatus",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Ended: {_hx_index:2,__enum__:"tink.streams.RegroupStatus",toString:$estr}
};
var tink_streams_RegroupResult = $hxEnums["tink.streams.RegroupResult"] = { __ename__ : true, __constructs__ : ["Converted","Terminated","Untouched","Errored"]
	,Converted: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Terminated: ($_=function(data) { return {_hx_index:1,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Untouched: {_hx_index:2,__enum__:"tink.streams.RegroupResult",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Regrouper = {};
tink_streams_Regrouper.ofIgnorance = function(f) {
	return { apply : function(i,_) {
		return f(i);
	}};
};
tink_streams_Regrouper.ofIgnoranceSync = function(f) {
	return { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	}};
};
tink_streams_Regrouper.ofFunc = function(f) {
	return { apply : f};
};
tink_streams_Regrouper.ofFuncSync = function(f) {
	return { apply : function(i,s) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i,s)));
	}};
};
var tink_streams__$Stream_CompoundStream = function(parts) {
	tink_streams_StreamBase.call(this);
	this.parts = parts;
};
tink_streams__$Stream_CompoundStream.__name__ = "tink.streams._Stream.CompoundStream";
tink_streams__$Stream_CompoundStream.consumeParts = function(parts,handler,cb) {
	if(parts.length == 0) {
		cb(tink_streams_Conclusion.Depleted);
	} else {
		parts[0].forEach(handler).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var rest = o.rest;
				parts = parts.slice();
				parts[0] = rest;
				cb(tink_streams_Conclusion.Halted(new tink_streams__$Stream_CompoundStream(parts)));
				break;
			case 1:
				var at = o.at;
				var e = o.error;
				if(at.get_depleted()) {
					parts = parts.slice(1);
				} else {
					parts = parts.slice();
					parts[0] = at;
				}
				cb(tink_streams_Conclusion.Clogged(e,new tink_streams__$Stream_CompoundStream(parts)));
				break;
			case 2:
				var e = o.error;
				cb(tink_streams_Conclusion.Failed(e));
				break;
			case 3:
				tink_streams__$Stream_CompoundStream.consumeParts(parts.slice(1),handler,cb);
				break;
			}
		});
	}
};
tink_streams__$Stream_CompoundStream.of = function(streams) {
	var ret = [];
	var _g = 0;
	while(_g < streams.length) {
		var s = streams[_g];
		++_g;
		s.decompose(ret);
	}
	if(ret.length == 0) {
		return tink_streams_Empty.inst;
	} else {
		return new tink_streams__$Stream_CompoundStream(ret);
	}
};
tink_streams__$Stream_CompoundStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_CompoundStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	get_depleted: function() {
		switch(this.parts.length) {
		case 0:
			return true;
		case 1:
			return this.parts[0].get_depleted();
		default:
			return false;
		}
	}
	,next: function() {
		var _gthis = this;
		if(this.parts.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
		} else {
			var ret = this.parts[0].next().flatMap(function(v) {
				switch(v._hx_index) {
				case 0:
					var rest = v.next;
					var v1 = v.value;
					var copy = _gthis.parts.slice();
					copy[0] = rest;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(v1,new tink_streams__$Stream_CompoundStream(copy))));
				case 2:
					if(_gthis.parts.length > 1) {
						return _gthis.parts[1].next();
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
					}
					break;
				default:
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
				}
			});
			return ret.gather();
		}
	}
	,decompose: function(into) {
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.decompose(into);
		}
	}
	,forEach: function(handler) {
		var parts = this.parts;
		var handler1 = handler;
		return tink_core_Future.async(function(cb) {
			tink_streams__$Stream_CompoundStream.consumeParts(parts,handler1,cb);
		});
	}
	,__class__: tink_streams__$Stream_CompoundStream
});
var tink_streams__$Stream_RegroupStream = function(source,f,prev) {
	if(prev == null) {
		prev = tink_streams_Empty.inst;
	}
	var ret = null;
	var terminated = false;
	var buf = [];
	var ret1 = source.forEach(tink_streams_Handler.ofUnknown(function(item) {
		buf.push(item);
		var ret1 = f.apply(buf,tink_streams_RegroupStatus.Flowing).map(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				ret = v;
				return tink_streams_Handled.Finish;
			case 1:
				var v = o.data;
				var l = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
				if(v._hx_index == 0) {
					var v1 = v.v;
					ret = v1;
				} else {
					ret = l.get();
				}
				terminated = true;
				return tink_streams_Handled.Finish;
			case 2:
				return tink_streams_Handled.Resume;
			case 3:
				var e = o.e;
				return tink_streams_Handled.Clog(e);
			}
		});
		return ret1.gather();
	})).map(function(o) {
		switch(o._hx_index) {
		case 0:
			if(terminated) {
				return ret;
			} else {
				var rest = o.rest;
				return new tink_streams__$Stream_RegroupStream(rest,f,ret);
			}
			break;
		case 1:
			var rest = o.at;
			var e = o.error;
			return new tink_streams__$Stream_CloggedStream(tink_streams_Stream.ofError(e),rest);
		case 2:
			var e = o.error;
			return tink_streams_Stream.ofError(e);
		case 3:
			if(buf.length == 0) {
				return tink_streams_Empty.inst;
			} else {
				var ret1 = f.apply(buf,tink_streams_RegroupStatus.Ended).map(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						return v;
					case 1:
						var v = o.data;
						var l = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
						if(v._hx_index == 0) {
							var v1 = v.v;
							return v1;
						} else {
							return l.get();
						}
						break;
					case 2:
						return tink_streams_Empty.inst;
					case 3:
						var e = o.e;
						return tink_streams_Stream.ofError(e);
					}
				});
				return tink_streams_Stream.flatten(ret1.gather());
			}
			break;
		}
	});
	var next = tink_streams_Stream.flatten(ret1.gather());
	tink_streams__$Stream_CompoundStream.call(this,[prev,next]);
};
tink_streams__$Stream_RegroupStream.__name__ = "tink.streams._Stream.RegroupStream";
tink_streams__$Stream_RegroupStream.__super__ = tink_streams__$Stream_CompoundStream;
tink_streams__$Stream_RegroupStream.prototype = $extend(tink_streams__$Stream_CompoundStream.prototype,{
	__class__: tink_streams__$Stream_RegroupStream
});
var tink_streams_Handled = $hxEnums["tink.streams.Handled"] = { __ename__ : true, __constructs__ : ["BackOff","Finish","Resume","Clog"]
	,BackOff: {_hx_index:0,__enum__:"tink.streams.Handled",toString:$estr}
	,Finish: {_hx_index:1,__enum__:"tink.streams.Handled",toString:$estr}
	,Resume: {_hx_index:2,__enum__:"tink.streams.Handled",toString:$estr}
	,Clog: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.Handled",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Conclusion = $hxEnums["tink.streams.Conclusion"] = { __ename__ : true, __constructs__ : ["Halted","Clogged","Failed","Depleted"]
	,Halted: ($_=function(rest) { return {_hx_index:0,rest:rest,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["rest"],$_)
	,Clogged: ($_=function(error,at) { return {_hx_index:1,error:error,at:at,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Depleted: {_hx_index:3,__enum__:"tink.streams.Conclusion",toString:$estr}
};
var tink_streams_ReductionStep = $hxEnums["tink.streams.ReductionStep"] = { __ename__ : true, __constructs__ : ["Progress","Crash"]
	,Progress: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Crash: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Reduction = $hxEnums["tink.streams.Reduction"] = { __ename__ : true, __constructs__ : ["Crashed","Failed","Reduced"]
	,Crashed: ($_=function(error,at) { return {_hx_index:0,error:error,at:at,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Reduced: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["result"],$_)
};
var tink_streams__$Stream_CloggedStream = function(rest,error) {
	tink_streams_StreamBase.call(this);
	this.rest = rest;
	this.error = error;
};
tink_streams__$Stream_CloggedStream.__name__ = "tink.streams._Stream.CloggedStream";
tink_streams__$Stream_CloggedStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_CloggedStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Clogged(this.error,this.rest)));
	}
	,__class__: tink_streams__$Stream_CloggedStream
});
var tink_streams__$Stream_ErrorStream = function(error) {
	tink_streams_StreamBase.call(this);
	this.error = error;
};
tink_streams__$Stream_ErrorStream.__name__ = "tink.streams._Stream.ErrorStream";
tink_streams__$Stream_ErrorStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_ErrorStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Failed(this.error)));
	}
	,__class__: tink_streams__$Stream_ErrorStream
});
var tink_streams_Empty = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_Empty.__name__ = "tink.streams.Empty";
tink_streams_Empty.make = function() {
	return tink_streams_Empty.inst;
};
tink_streams_Empty.__super__ = tink_streams_StreamBase;
tink_streams_Empty.prototype = $extend(tink_streams_StreamBase.prototype,{
	get_depleted: function() {
		return true;
	}
	,next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Depleted));
	}
	,__class__: tink_streams_Empty
});
var tink_streams_Mapping = {};
tink_streams_Mapping._new = function(o) {
	var this1 = o;
	return this1;
};
tink_streams_Mapping.ofNext = function(n) {
	var this1 = { apply : function(i,_) {
		var this1 = tink_core_Promise.next(n(i[0]),function(o) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(tink_streams_Stream.single(o)))));
		});
		var f = tink_core_Recover.ofSync(tink_streams_RegroupResult.Errored);
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams_Mapping.ofAsync = function(f) {
	var this1 = { apply : function(i,_) {
		var ret = f(i[0]).map(function(o) {
			return tink_streams_RegroupResult.Converted(tink_streams_Stream.single(o));
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams_Mapping.ofSync = function(f) {
	var this1 = { apply : function(i,_) {
		var v;
		var _g = f(i[0]);
		switch(_g._hx_index) {
		case 0:
			var v1 = _g.data;
			v = tink_streams_RegroupResult.Converted(tink_streams_Stream.single(v1));
			break;
		case 1:
			var e = _g.failure;
			v = tink_streams_RegroupResult.Errored(e);
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}};
	return this1;
};
tink_streams_Mapping.ofPlain = function(f) {
	var this1 = { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(tink_streams_Stream.single(f(i[0])))));
	}};
	return this1;
};
var tink_streams_Filter = {};
tink_streams_Filter._new = function(o) {
	var this1 = o;
	return this1;
};
tink_streams_Filter.ofNext = function(n) {
	var this1 = { apply : function(i,_) {
		var this1 = tink_core_Promise.next(n(i[0]),function(matched) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(matched ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst))));
		});
		var f = tink_core_Recover.ofSync(tink_streams_RegroupResult.Errored);
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams_Filter.ofAsync = function(f) {
	var this1 = { apply : function(i,_) {
		var ret = f(i[0]).map(function(matched) {
			return tink_streams_RegroupResult.Converted(matched ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst);
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams_Filter.ofSync = function(f) {
	var this1 = { apply : function(i,_) {
		var v;
		var _g = f(i[0]);
		switch(_g._hx_index) {
		case 0:
			var v1 = _g.data;
			v = tink_streams_RegroupResult.Converted(v1 ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst);
			break;
		case 1:
			var e = _g.failure;
			v = tink_streams_RegroupResult.Errored(e);
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}};
	return this1;
};
tink_streams_Filter.ofPlain = function(f) {
	var this1 = { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(f(i[0]) ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst)));
	}};
	return this1;
};
var tink_streams_IdealizeStream = function(target,rescue) {
	tink_streams_IdealStreamBase.call(this);
	this.target = target;
	this.rescue = rescue;
};
tink_streams_IdealizeStream.__name__ = "tink.streams.IdealizeStream";
tink_streams_IdealizeStream.__super__ = tink_streams_IdealStreamBase;
tink_streams_IdealizeStream.prototype = $extend(tink_streams_IdealStreamBase.prototype,{
	get_depleted: function() {
		return this.target.get_depleted();
	}
	,next: function() {
		var _gthis = this;
		var ret = this.target.next().flatMap(function(v) {
			if(v._hx_index == 1) {
				var e = v.e;
				return _gthis.rescue(e).idealize(_gthis.rescue).next();
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
			}
		});
		return ret.gather();
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.target.forEach(handler).handle(function(end) {
				switch(end._hx_index) {
				case 0:
					var rest = end.rest;
					cb(tink_streams_Conclusion.Halted(rest.idealize(_gthis.rescue)));
					break;
				case 1:
					var at = end.at;
					var e = end.error;
					cb(tink_streams_Conclusion.Clogged(e,at.idealize(_gthis.rescue)));
					break;
				case 2:
					var e = end.error;
					_gthis.rescue(e).idealize(_gthis.rescue).forEach(handler).handle(cb);
					break;
				case 3:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		});
	}
	,__class__: tink_streams_IdealizeStream
});
var tink_streams_Single = function(value) {
	tink_streams_StreamBase.call(this);
	this.value = value;
};
tink_streams_Single.__name__ = "tink.streams.Single";
tink_streams_Single.__super__ = tink_streams_StreamBase;
tink_streams_Single.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(this.value.get(),tink_streams_Empty.inst)));
	}
	,forEach: function(handle) {
		var _gthis = this;
		var ret = handle(this.value.get()).map(function(step) {
			switch(step._hx_index) {
			case 0:
				return tink_streams_Conclusion.Halted(_gthis);
			case 1:
				return tink_streams_Conclusion.Halted(tink_streams_Empty.inst);
			case 2:
				return tink_streams_Conclusion.Depleted;
			case 3:
				var e = step.e;
				return tink_streams_Conclusion.Clogged(e,_gthis);
			}
		});
		return ret.gather();
	}
	,__class__: tink_streams_Single
});
var tink_streams_Handler = {};
tink_streams_Handler._new = function(f) {
	var this1 = f;
	return this1;
};
tink_streams_Handler.apply = function(this1,item) {
	return this1(item);
};
tink_streams_Handler.ofSafeSync = function(f) {
	var this1 = function(i) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	};
	return this1;
};
tink_streams_Handler.ofUnknownSync = function(f) {
	var this1 = function(i) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	};
	return this1;
};
tink_streams_Handler.ofSafe = function(f) {
	var this1 = f;
	return this1;
};
tink_streams_Handler.ofUnknown = function(f) {
	var this1 = f;
	return this1;
};
var tink_streams_Reducer = {};
tink_streams_Reducer._new = function(f) {
	var this1 = f;
	return this1;
};
tink_streams_Reducer.apply = function(this1,res,item) {
	return this1(res,item);
};
tink_streams_Reducer.ofSafeSync = function(f) {
	var this1 = function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
	};
	return this1;
};
tink_streams_Reducer.ofUnknownSync = function(f) {
	var this1 = function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
	};
	return this1;
};
tink_streams_Reducer.ofSafe = function(f) {
	var this1 = f;
	return this1;
};
tink_streams_Reducer.ofPlainSync = function(f) {
	var this1 = function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(f(res,cur))));
	};
	return this1;
};
tink_streams_Reducer.ofUnknown = function(f) {
	var this1 = f;
	return this1;
};
tink_streams_Reducer.ofPromiseBased = function(f) {
	var this1 = function(res,cur) {
		var ret = f(res,cur).map(function(s) {
			switch(s._hx_index) {
			case 0:
				var r = s.data;
				return tink_streams_ReductionStep.Progress(r);
			case 1:
				var e = s.failure;
				return tink_streams_ReductionStep.Crash(e);
			}
		});
		return ret.gather();
	};
	return this1;
};
var tink_streams_FutureStream = function(f) {
	tink_streams_StreamBase.call(this);
	this.f = f;
};
tink_streams_FutureStream.__name__ = "tink.streams.FutureStream";
tink_streams_FutureStream.__super__ = tink_streams_StreamBase;
tink_streams_FutureStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		var ret = this.f.flatMap(function(s) {
			return s.next();
		});
		return ret.gather();
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.f.handle(function(s) {
				s.forEach(handler).handle(cb);
			});
		});
	}
	,__class__: tink_streams_FutureStream
});
var tink_streams_Generator = function(upcoming) {
	tink_streams_StreamBase.call(this);
	this.upcoming = upcoming;
};
tink_streams_Generator.__name__ = "tink.streams.Generator";
tink_streams_Generator.stream = function(step) {
	return new tink_streams_Generator(tink_core_Future.async(step,true));
};
tink_streams_Generator.__super__ = tink_streams_StreamBase;
tink_streams_Generator.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		return this.upcoming;
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.upcoming.handle(function(e) {
				switch(e._hx_index) {
				case 0:
					var then = e.next;
					var v = e.value;
					handler(v).handle(function(s) {
						switch(s._hx_index) {
						case 0:
							cb(tink_streams_Conclusion.Halted(_gthis));
							break;
						case 1:
							cb(tink_streams_Conclusion.Halted(then));
							break;
						case 2:
							then.forEach(handler).handle(cb);
							break;
						case 3:
							var e = s.e;
							cb(tink_streams_Conclusion.Clogged(e,_gthis));
							break;
						}
					});
					break;
				case 1:
					var e1 = e.e;
					cb(tink_streams_Conclusion.Failed(e1));
					break;
				case 2:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		},true);
	}
	,__class__: tink_streams_Generator
});
var tink_streams_BlendStream = function(a,b) {
	var first = null;
	var wait = function(s) {
		var ret = s.next().map(function(o) {
			if(first == null) {
				first = s;
			}
			return o;
		});
		return ret.gather();
	};
	var n1 = wait(a);
	var n2 = wait(b);
	tink_streams_Generator.call(this,tink_core_Future.async(function(cb) {
		tink_core_Future.first(n1,n2).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var rest = o.next;
				var item = o.value;
				cb(tink_streams_Step.Link(item,new tink_streams_BlendStream(rest,first == a ? b : a)));
				break;
			case 1:
				var e = o.e;
				cb(tink_streams_Step.Fail(e));
				break;
			case 2:
				(first == a ? n2 : n1).handle(cb);
				break;
			}
		});
	}));
};
tink_streams_BlendStream.__name__ = "tink.streams.BlendStream";
tink_streams_BlendStream.__super__ = tink_streams_Generator;
tink_streams_BlendStream.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_streams_BlendStream
});
var tink_streams_Step = $hxEnums["tink.streams.Step"] = { __ename__ : true, __constructs__ : ["Link","Fail","End"]
	,Link: ($_=function(value,next) { return {_hx_index:0,value:value,next:next,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["value","next"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Step",toString:$estr}
};
var tink_streams_SignalStream = function(signal) {
	var ret = tink_core_Signal.nextTime(signal).map(function(o) {
		switch(o._hx_index) {
		case 0:
			var data = o.data;
			return tink_streams_Step.Link(data,new tink_streams_SignalStream(signal));
		case 1:
			var e = o.e;
			return tink_streams_Step.Fail(e);
		case 2:
			return tink_streams_Step.End;
		}
	});
	tink_streams_Generator.call(this,ret.gather());
};
tink_streams_SignalStream.__name__ = "tink.streams.SignalStream";
tink_streams_SignalStream.__super__ = tink_streams_Generator;
tink_streams_SignalStream.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_streams_SignalStream
});
var tink_streams_Yield = $hxEnums["tink.streams.Yield"] = { __ename__ : true, __constructs__ : ["Data","Fail","End"]
	,Data: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Yield",toString:$estr}
};
var tink_testrunner_Assertion = function(holds,description,pos) {
	this.holds = holds;
	this.description = description;
	this.pos = pos;
};
tink_testrunner_Assertion.__name__ = "tink.testrunner.Assertion";
tink_testrunner_Assertion.prototype = {
	__class__: tink_testrunner_Assertion
};
var tink_testrunner_AssertionResult = {};
tink_testrunner_AssertionResult.ofBool = function(v) {
	if(v) {
		return tink_core_Outcome.Success(tink_core_Noise.Noise);
	} else {
		return tink_core_Outcome.Failure(null);
	}
};
tink_testrunner_AssertionResult.ofOutcome = function(v) {
	switch(v._hx_index) {
	case 0:
		var _g = v.data;
		return tink_core_Outcome.Success(tink_core_Noise.Noise);
	case 1:
		var e = v.failure;
		return tink_core_Outcome.Failure("" + e.toString() + " " + Std.string(e.data));
	}
};
tink_testrunner_AssertionResult.toBool = function(this1) {
	return tink_core_OutcomeTools.isSuccess(this1);
};
tink_testrunner_AssertionResult.not = function(this1) {
	return !tink_core_OutcomeTools.isSuccess(this1);
};
tink_testrunner_AssertionResult.and_ = function(a,b) {
	if(tink_core_OutcomeTools.isSuccess(a)) {
		return b;
	} else {
		return false;
	}
};
tink_testrunner_AssertionResult.or_ = function(a,b) {
	if(!tink_core_OutcomeTools.isSuccess(a)) {
		return b;
	} else {
		return true;
	}
};
tink_testrunner_AssertionResult._and = function(a,b) {
	if(a) {
		return tink_core_OutcomeTools.isSuccess(b);
	} else {
		return false;
	}
};
tink_testrunner_AssertionResult._or = function(a,b) {
	if(!a) {
		return tink_core_OutcomeTools.isSuccess(b);
	} else {
		return true;
	}
};
var tink_testrunner_Assertions = {};
tink_testrunner_Assertions.ofAssertion = function(o) {
	return tink_streams_Stream.ofIterator(new haxe_iterators_ArrayIterator([o]));
};
tink_testrunner_Assertions.ofArray = function(o) {
	return tink_streams_Stream.ofIterator(new haxe_iterators_ArrayIterator(o));
};
tink_testrunner_Assertions.ofPromiseArray = function(o) {
	return tink_streams_Stream.promise(tink_core_Promise.next(o,tink_core_Next.ofSafeSync(function(o) {
		return tink_streams_Stream.ofIterator(new haxe_iterators_ArrayIterator(o));
	})));
};
tink_testrunner_Assertions.ofFutureAssertion = function(p) {
	var ret = p.map(function(a) {
		return tink_core_Outcome.Success(tink_streams_Stream.ofIterator(new haxe_iterators_ArrayIterator([a])));
	});
	return tink_streams_Stream.promise(ret.gather());
};
tink_testrunner_Assertions.ofFutureAssertions = function(p) {
	var ret = p.map(tink_core_Outcome.Success);
	return tink_streams_Stream.promise(ret.gather());
};
tink_testrunner_Assertions.ofSurpriseAssertion = function(p) {
	return tink_streams_Stream.promise(tink_core_Future._tryMap(p,function(o) {
		return tink_streams_Stream.ofIterator(new haxe_iterators_ArrayIterator([o]));
	}));
};
tink_testrunner_Assertions.ofOutcomeAssertions = function(o) {
	return tink_streams_Stream.promise(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o)));
};
tink_testrunner_Assertions.ofPromiseAssertions = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_testrunner_Assertions.ofSurpriseAssertions = function(p) {
	return tink_streams_Stream.promise(p);
};
var tink_testrunner_Batch = {};
tink_testrunner_Batch._new = function(suites) {
	var this1 = suites;
	return this1;
};
tink_testrunner_Batch.ofSuites = function(suites) {
	var this1 = suites;
	return this1;
};
tink_testrunner_Batch.ofSuite = function(suite) {
	var this1 = [suite];
	return this1;
};
tink_testrunner_Batch.ofCases = function(cases,pos) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < cases.length) {
		var c = cases[_g1];
		++_g1;
		var _g2 = js_Boot.getClass(c);
		var suite;
		if(_g2 == null) {
			suite = null;
		} else {
			var c1 = _g2;
			suite = c1.__name__;
		}
		_g.push(suite);
	}
	var this1 = [new tink_testrunner_BasicSuite({ name : _g.join(", "), pos : pos},cases,{ fileName : "tink/testrunner/Suite.hx", lineNumber : 36, className : "tink.testrunner._Suite.Suite_Impl_", methodName : "ofCases"})];
	return this1;
};
tink_testrunner_Batch.ofCase = function(caze,pos) {
	var cases = [caze];
	var _g = [];
	var _g1 = 0;
	while(_g1 < cases.length) {
		var c = cases[_g1];
		++_g1;
		var _g2 = js_Boot.getClass(c);
		var suite;
		if(_g2 == null) {
			suite = null;
		} else {
			var c1 = _g2;
			suite = c1.__name__;
		}
		_g.push(suite);
	}
	var this1 = [new tink_testrunner_BasicSuite({ name : _g.join(", "), pos : pos},cases,{ fileName : "tink/testrunner/Suite.hx", lineNumber : 36, className : "tink.testrunner._Suite.Suite_Impl_", methodName : "ofCases"})];
	return this1;
};
tink_testrunner_Batch.get_suites = function(this1) {
	return this1;
};
var tink_testrunner_Case = {};
tink_testrunner_Case.shouldRun = function(this1,includeMode) {
	if(!this1.exclude) {
		if(includeMode) {
			return this1.include;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
var tink_testrunner_CaseObject = function() { };
tink_testrunner_CaseObject.__name__ = "tink.testrunner.CaseObject";
tink_testrunner_CaseObject.__isInterface__ = true;
tink_testrunner_CaseObject.prototype = {
	__class__: tink_testrunner_CaseObject
};
var tink_testrunner_BasicCase = function(pos) {
	this.pos = null;
	this.exclude = false;
	this.include = false;
	this.timeout = 5000;
	var c = js_Boot.getClass(this);
	this.info = { name : c.__name__, description : null, pos : pos};
};
tink_testrunner_BasicCase.__name__ = "tink.testrunner.BasicCase";
tink_testrunner_BasicCase.__interfaces__ = [tink_testrunner_CaseObject];
tink_testrunner_BasicCase.prototype = {
	execute: function() {
		return tink_streams_Stream.ofIterator(new haxe_iterators_ArrayIterator([]));
	}
	,__class__: tink_testrunner_BasicCase
};
var tink_testrunner_Reporter = function() { };
tink_testrunner_Reporter.__name__ = "tink.testrunner.Reporter";
tink_testrunner_Reporter.__isInterface__ = true;
tink_testrunner_Reporter.prototype = {
	__class__: tink_testrunner_Reporter
};
var tink_testrunner_ReportType = $hxEnums["tink.testrunner.ReportType"] = { __ename__ : true, __constructs__ : ["BatchStart","SuiteStart","CaseStart","Assertion","CaseFinish","SuiteFinish","BatchFinish"]
	,BatchStart: {_hx_index:0,__enum__:"tink.testrunner.ReportType",toString:$estr}
	,SuiteStart: ($_=function(info,hasCasesToRun) { return {_hx_index:1,info:info,hasCasesToRun:hasCasesToRun,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["info","hasCasesToRun"],$_)
	,CaseStart: ($_=function(info,shouldRun) { return {_hx_index:2,info:info,shouldRun:shouldRun,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["info","shouldRun"],$_)
	,Assertion: ($_=function(assertion) { return {_hx_index:3,assertion:assertion,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["assertion"],$_)
	,CaseFinish: ($_=function(result) { return {_hx_index:4,result:result,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["result"],$_)
	,SuiteFinish: ($_=function(result) { return {_hx_index:5,result:result,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["result"],$_)
	,BatchFinish: ($_=function(result) { return {_hx_index:6,result:result,__enum__:"tink.testrunner.ReportType",toString:$estr}; },$_.__params__ = ["result"],$_)
};
var tink_testrunner_Formatter = function() { };
tink_testrunner_Formatter.__name__ = "tink.testrunner.Formatter";
tink_testrunner_Formatter.__isInterface__ = true;
tink_testrunner_Formatter.prototype = {
	__class__: tink_testrunner_Formatter
};
var tink_testrunner_BasicFormatter = function() {
};
tink_testrunner_BasicFormatter.__name__ = "tink.testrunner.BasicFormatter";
tink_testrunner_BasicFormatter.__interfaces__ = [tink_testrunner_Formatter];
tink_testrunner_BasicFormatter.prototype = {
	success: function(v) {
		return this.color(v,"green");
	}
	,error: function(v) {
		return this.color(v,"red");
	}
	,warning: function(v) {
		return this.color(v,"yellow");
	}
	,info: function(v) {
		return this.color(v,"yellow");
	}
	,extra: function(v) {
		return this.color(v,"cyan");
	}
	,mute: function(v) {
		return this.color(v,"blue");
	}
	,normal: function(v) {
		return this.color(v,"");
	}
	,color: function(v,c) {
		return v;
	}
	,__class__: tink_testrunner_BasicFormatter
};
var tink_testrunner_AnsiFormatter = function() {
	tink_testrunner_BasicFormatter.call(this);
};
tink_testrunner_AnsiFormatter.__name__ = "tink.testrunner.AnsiFormatter";
tink_testrunner_AnsiFormatter.__super__ = tink_testrunner_BasicFormatter;
tink_testrunner_AnsiFormatter.prototype = $extend(tink_testrunner_BasicFormatter.prototype,{
	color: function(v,c) {
		switch(c) {
		case "blue":
			return ANSI.aset([Attribute.Blue]) + v + ANSI.aset([Attribute.DefaultForeground]);
		case "cyan":
			return ANSI.aset([Attribute.Cyan]) + v + ANSI.aset([Attribute.DefaultForeground]);
		case "green":
			return ANSI.aset([Attribute.Green]) + v + ANSI.aset([Attribute.DefaultForeground]);
		case "magenta":
			return ANSI.aset([Attribute.Magenta]) + v + ANSI.aset([Attribute.DefaultForeground]);
		case "red":
			return ANSI.aset([Attribute.Red]) + v + ANSI.aset([Attribute.DefaultForeground]);
		case "yellow":
			return ANSI.aset([Attribute.Yellow]) + v + ANSI.aset([Attribute.DefaultForeground]);
		default:
			return ANSI.aset([Attribute.DefaultForeground]) + v;
		}
	}
	,__class__: tink_testrunner_AnsiFormatter
});
var tink_testrunner_BasicReporter = function(formatter) {
	this.noise = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
	this.formatter = formatter != null ? formatter : Sys.systemName() == "Windows" ? new tink_testrunner_BasicFormatter() : new tink_testrunner_AnsiFormatter();
};
tink_testrunner_BasicReporter.__name__ = "tink.testrunner.BasicReporter";
tink_testrunner_BasicReporter.__interfaces__ = [tink_testrunner_Reporter];
tink_testrunner_BasicReporter.prototype = {
	report: function(type) {
		switch(type._hx_index) {
		case 0:
			break;
		case 1:
			var hasCasesToRun = type.hasCasesToRun;
			var info = type.info;
			if(hasCasesToRun) {
				this.println(" ");
				var m = this.formatter.info(info.name) + ": ";
				if(info.pos != null) {
					m += this.formatter.extra("[" + info.pos.fileName + ":" + info.pos.lineNumber + "]");
				}
				this.println(m);
			}
			break;
		case 2:
			var shouldRun = type.shouldRun;
			var info = type.info;
			if(shouldRun) {
				var m = this.formatter.info(this.indent(info.name,2)) + ": ";
				if(info.pos != null) {
					m += this.formatter.extra("[" + info.pos.fileName + ":" + info.pos.lineNumber + "] ");
				}
				if(info.description != null) {
					m += this.formatter.mute(info.description);
				}
				this.println(m);
			}
			break;
		case 3:
			var assertion = type.assertion;
			var failure = null;
			var holds;
			var _g = assertion.holds;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.data;
				holds = this.formatter.success("[OK]");
				break;
			case 1:
				var msg = _g.failure;
				failure = msg;
				holds = this.formatter.error("[FAIL]");
				break;
			}
			var pos = this.formatter.extra("[" + assertion.pos.fileName + ":" + assertion.pos.lineNumber + "]");
			var m = this.indent("- " + holds + " " + pos + " " + assertion.description,4);
			this.println(m);
			if(failure != null) {
				this.println(this.formatter.error(this.indent(failure,8)));
			}
			break;
		case 4:
			var _g = type.result;
			var _g1 = _g.info;
			var result = _g.result;
			if(result._hx_index == 1) {
				var e = result.e;
				this.println(this.formatter.error(this.indent("- " + this.formatError(e),4)));
			}
			break;
		case 5:
			var result = type.result;
			var _g = result.result;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.cases;
				break;
			case 1:
				var e = _g.e;
				this.println(this.formatter.error(this.indent("Setup Failed: " + this.formatError(e),2)));
				break;
			case 2:
				var _g1 = _g.cases;
				var e = _g.e;
				this.println(this.formatter.error(this.indent("Teardown Failed: " + this.formatError(e),2)));
				break;
			}
			break;
		case 6:
			var result = type.result;
			var summary = tink_testrunner_BatchResult.summary(result);
			var total = summary.assertions.length;
			var failures = 0;
			var errors = 0;
			var _g = 0;
			var _g1 = summary.failures;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(f._hx_index == 0) {
					var _g2 = f.assertion;
					++failures;
				} else {
					++errors;
				}
			}
			var success = total - failures;
			var m_b = "";
			m_b += total == null ? "null" : "" + total;
			m_b += " Assertion";
			if(total > 1) {
				m_b += "s";
			}
			m_b += "   ";
			m_b += success == null ? "null" : "" + success;
			m_b += " Success";
			m_b += "   ";
			m_b += failures == null ? "null" : "" + failures;
			m_b += " Failure";
			if(failures > 1) {
				m_b += "s";
			}
			m_b += "   ";
			m_b += errors == null ? "null" : "" + errors;
			m_b += " Error";
			if(errors > 1) {
				m_b += "s";
			}
			var m = m_b += "   ";
			this.println(" ");
			this.println(failures == 0 && errors == 0 ? this.formatter.success(m) : this.formatter.error(m));
			this.println(" ");
			break;
		}
		return this.noise;
	}
	,println: function(v) {
		process.stdout.write(Std.string(v));
		process.stdout.write("\n");
	}
	,indent: function(v,i) {
		if(i == null) {
			i = 0;
		}
		var _this = v.split("\n");
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i1 = _g++;
			result[i1] = StringTools.lpad(""," ",i) + _this[i1];
		}
		return result.join("\n");
	}
	,formatError: function(e) {
		var str = e.toString();
		if(e.data != null) {
			str += "\n" + Std.string(e.data);
		}
		return str;
	}
	,__class__: tink_testrunner_BasicReporter
};
var tink_testrunner_Runner = function() { };
tink_testrunner_Runner.__name__ = "tink.testrunner.Runner";
tink_testrunner_Runner.exit = function(result) {
	var code = tink_testrunner_BatchResult.summary(result).failures.length;
	process.exit(code);
};
tink_testrunner_Runner.run = function(batch,reporter,timers) {
	if(reporter == null) {
		reporter = new tink_testrunner_BasicReporter();
	}
	if(timers == null) {
		timers = new tink_testrunner_HaxeTimerManager();
	}
	var includeMode = false;
	var _g = 0;
	var _g1 = batch;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(includeMode) {
			break;
		}
		var _g2 = 0;
		var _g3 = s.cases;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			if(c.include) {
				includeMode = true;
				break;
			}
		}
	}
	return tink_core_Future.async(function(cb) {
		reporter.report(tink_testrunner_ReportType.BatchStart).handle(function(_) {
			var iter_current;
			var iter_array;
			iter_current = 0;
			iter_array = batch;
			var results = [];
			var next = null;
			next = function() {
				if(iter_current < iter_array.length) {
					iter_current += 1;
					var suite = iter_array[iter_current - 1];
					tink_testrunner_Runner.runSuite(suite,reporter,timers,includeMode).handle(function(o) {
						results.push(o);
						reporter.report(tink_testrunner_ReportType.SuiteFinish(o)).handle(tink_core_Callback.fromNiladic(next));
					});
				} else {
					var next1 = reporter.report(tink_testrunner_ReportType.BatchFinish(results));
					var _g = cb;
					var a1 = results;
					next1.handle(tink_core_Callback.fromNiladic(function() {
						_g(a1);
					}));
				}
			};
			next();
		});
	});
};
tink_testrunner_Runner.runSuite = function(suite,reporter,timers,includeMode) {
	return tink_core_Future.async(function(cb) {
		var cases = tink_testrunner_Suite.getCasesToBeRun(suite,includeMode);
		var hasCases = cases.length > 0;
		reporter.report(tink_testrunner_ReportType.SuiteStart(suite.info,hasCases)).handle(function(_) {
			var setup = function() {
				if(hasCases) {
					return suite.setup();
				} else {
					return tink_core_Promise.NOISE;
				}
			};
			var teardown = function() {
				if(hasCases) {
					return suite.teardown();
				} else {
					return tink_core_Promise.NOISE;
				}
			};
			var iter_current;
			var iter_array;
			iter_current = 0;
			iter_array = suite.cases;
			var results = [];
			var next = null;
			next = function() {
				if(iter_current < iter_array.length) {
					iter_current += 1;
					var caze = iter_array[iter_current - 1];
					tink_testrunner_Runner.runCase(caze,suite,reporter,timers,tink_testrunner_Case.shouldRun(caze,includeMode)).handle(function(r) {
						results.push(r);
						next();
					});
				} else {
					teardown().handle(function(o) {
						var next;
						switch(o._hx_index) {
						case 0:
							var _g = o.data;
							next = tink_testrunner_SuiteResultType.Success(results);
							break;
						case 1:
							var e = o.failure;
							next = tink_testrunner_SuiteResultType.TeardownFailed(e,results);
							break;
						}
						cb({ info : suite.info, result : next});
					});
				}
			};
			setup().handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var _g = o.data;
					next();
					break;
				case 1:
					var e = o.failure;
					cb({ info : suite.info, result : tink_testrunner_SuiteResultType.SetupFailed(e)});
					break;
				}
			});
		});
	});
};
tink_testrunner_Runner.runCase = function(caze,suite,reporter,timers,shouldRun) {
	return tink_core_Future.async(function(cb) {
		if(shouldRun) {
			reporter.report(tink_testrunner_ReportType.CaseStart(caze.info,shouldRun)).handle(function(_) {
				tink_core_Promise.next(tink_core_Promise.next(tink_testrunner_TimeoutHelper.timeout(suite.before(),caze.timeout,timers,caze.pos),function(_) {
					var assertions = [];
					return tink_testrunner_TimeoutHelper.timeout(tink_core_Future.next(caze.execute().forEach(tink_streams_Handler.ofSafe(function(a) {
						assertions.push(a);
						var ret = reporter.report(tink_testrunner_ReportType.Assertion(a)).map(function(_) {
							return tink_streams_Handled.Resume;
						});
						return ret.gather();
					})),tink_core_Next.ofSafe(function(o) {
						switch(o._hx_index) {
						case 0:
							var _g = o.rest;
							throw haxe_Exception.thrown("unreachable");
						case 2:
							var e = o.error;
							return tink_core_Outcome.Failure(e);
						case 3:
							return tink_core_Outcome.Success(assertions);
						}
					})),caze.timeout,timers,{ fileName : "tink/testrunner/Runner.hx", lineNumber : 107, className : "tink.testrunner.Runner", methodName : "runCase"});
				}),function(result) {
					return tink_core_Promise.next(tink_testrunner_TimeoutHelper.timeout(suite.after(),caze.timeout,timers,caze.pos),function(_) {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(result)));
					});
				}).handle(function(result) {
					var results;
					switch(result._hx_index) {
					case 0:
						var v = result.data;
						results = tink_testrunner_CaseResultType.Succeeded(v);
						break;
					case 1:
						var e = result.failure;
						results = tink_testrunner_CaseResultType.Failed(e);
						break;
					}
					var results1 = { info : caze.info, result : results};
					reporter.report(tink_testrunner_ReportType.CaseFinish(results1)).handle(function(_) {
						cb(results1);
					});
				});
			});
		} else {
			reporter.report(tink_testrunner_ReportType.CaseStart(caze.info,shouldRun)).handle(function(_) {
				var results = { info : caze.info, result : tink_testrunner_CaseResultType.Excluded};
				reporter.report(tink_testrunner_ReportType.CaseFinish(results)).handle(function(_) {
					cb(results);
				});
			});
		}
	});
};
var tink_testrunner_TimeoutHelper = function() { };
tink_testrunner_TimeoutHelper.__name__ = "tink.testrunner.TimeoutHelper";
tink_testrunner_TimeoutHelper.timeout = function(promise,ms,timers,pos) {
	return tink_core_Future.async(function(cb) {
		var done = false;
		var timer = null;
		var link = promise.handle(function(o) {
			done = true;
			if(timer != null) {
				timer.stop();
			}
			cb(o);
		});
		if(!done && timers != null) {
			timer = timers.schedule(ms,function() {
				if(link != null) {
					link.cancel();
				}
				cb(tink_core_Outcome.Failure(new tink_core_TypedError(null,"Timed out after " + ms + " ms",pos)));
			});
		}
	});
};
var tink_testrunner_BatchResult = {};
tink_testrunner_BatchResult.summary = function(this1) {
	var ret = { assertions : [], failures : []};
	var handleCases = function(cases) {
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			var _g1 = c.result;
			switch(_g1._hx_index) {
			case 0:
				var assertions = _g1.assertions;
				ret.assertions = ret.assertions.concat(assertions);
				var ret1 = ret.failures;
				var _g2 = [];
				var _g3 = 0;
				var _g4 = assertions;
				while(_g3 < _g4.length) {
					var v = _g4[_g3];
					++_g3;
					if(!tink_core_OutcomeTools.isSuccess(v.holds)) {
						_g2.push(v);
					}
				}
				var _this = _g2;
				var result = new Array(_this.length);
				var _g5 = 0;
				var _g6 = _this.length;
				while(_g5 < _g6) {
					var i = _g5++;
					result[i] = tink_testrunner_FailureType.AssertionFailed(_this[i]);
				}
				ret.failures = ret1.concat(result);
				break;
			case 1:
				var e = _g1.e;
				ret.failures.push(tink_testrunner_FailureType.CaseFailed(e));
				break;
			case 2:
				break;
			}
		}
	};
	var _g = 0;
	while(_g < this1.length) {
		var s = this1[_g];
		++_g;
		var _g1 = s.result;
		switch(_g1._hx_index) {
		case 0:
			var cases = _g1.cases;
			handleCases(cases);
			break;
		case 1:
			var e = _g1.e;
			ret.failures.push(tink_testrunner_FailureType.SuiteFailed(e));
			break;
		case 2:
			var cases1 = _g1.cases;
			var e1 = _g1.e;
			handleCases(cases1);
			ret.failures.push(tink_testrunner_FailureType.SuiteFailed(e1));
			break;
		}
	}
	return ret;
};
var tink_testrunner_SuiteResultType = $hxEnums["tink.testrunner.SuiteResultType"] = { __ename__ : true, __constructs__ : ["Success","SetupFailed","TeardownFailed"]
	,Success: ($_=function(cases) { return {_hx_index:0,cases:cases,__enum__:"tink.testrunner.SuiteResultType",toString:$estr}; },$_.__params__ = ["cases"],$_)
	,SetupFailed: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.testrunner.SuiteResultType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TeardownFailed: ($_=function(e,cases) { return {_hx_index:2,e:e,cases:cases,__enum__:"tink.testrunner.SuiteResultType",toString:$estr}; },$_.__params__ = ["e","cases"],$_)
};
var tink_testrunner_CaseResultType = $hxEnums["tink.testrunner.CaseResultType"] = { __ename__ : true, __constructs__ : ["Succeeded","Failed","Excluded"]
	,Succeeded: ($_=function(assertions) { return {_hx_index:0,assertions:assertions,__enum__:"tink.testrunner.CaseResultType",toString:$estr}; },$_.__params__ = ["assertions"],$_)
	,Failed: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.testrunner.CaseResultType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Excluded: {_hx_index:2,__enum__:"tink.testrunner.CaseResultType",toString:$estr}
};
var tink_testrunner_FailureType = $hxEnums["tink.testrunner.FailureType"] = { __ename__ : true, __constructs__ : ["AssertionFailed","CaseFailed","SuiteFailed"]
	,AssertionFailed: ($_=function(assertion) { return {_hx_index:0,assertion:assertion,__enum__:"tink.testrunner.FailureType",toString:$estr}; },$_.__params__ = ["assertion"],$_)
	,CaseFailed: ($_=function(err) { return {_hx_index:1,err:err,__enum__:"tink.testrunner.FailureType",toString:$estr}; },$_.__params__ = ["err"],$_)
	,SuiteFailed: ($_=function(err) { return {_hx_index:2,err:err,__enum__:"tink.testrunner.FailureType",toString:$estr}; },$_.__params__ = ["err"],$_)
};
var tink_testrunner_Suite = {};
tink_testrunner_Suite.ofCases = function(cases,pos) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < cases.length) {
		var c = cases[_g1];
		++_g1;
		var _g2 = js_Boot.getClass(c);
		var tmp;
		if(_g2 == null) {
			tmp = null;
		} else {
			var c1 = _g2;
			tmp = c1.__name__;
		}
		_g.push(tmp);
	}
	return new tink_testrunner_BasicSuite({ name : _g.join(", "), pos : pos},cases,{ fileName : "tink/testrunner/Suite.hx", lineNumber : 36, className : "tink.testrunner._Suite.Suite_Impl_", methodName : "ofCases"});
};
tink_testrunner_Suite.ofCase = function(caze,pos) {
	var cases = [caze];
	var _g = [];
	var _g1 = 0;
	while(_g1 < cases.length) {
		var c = cases[_g1];
		++_g1;
		var _g2 = js_Boot.getClass(c);
		var tmp;
		if(_g2 == null) {
			tmp = null;
		} else {
			var c1 = _g2;
			tmp = c1.__name__;
		}
		_g.push(tmp);
	}
	return new tink_testrunner_BasicSuite({ name : _g.join(", "), pos : pos},cases,{ fileName : "tink/testrunner/Suite.hx", lineNumber : 36, className : "tink.testrunner._Suite.Suite_Impl_", methodName : "ofCases"});
};
tink_testrunner_Suite.getCasesToBeRun = function(this1,includeMode) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.cases;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(tink_testrunner_Case.shouldRun(v,includeMode)) {
			_g.push(v);
		}
	}
	return _g;
};
var tink_testrunner_SuiteObject = function() { };
tink_testrunner_SuiteObject.__name__ = "tink.testrunner.SuiteObject";
tink_testrunner_SuiteObject.__isInterface__ = true;
tink_testrunner_SuiteObject.prototype = {
	__class__: tink_testrunner_SuiteObject
};
var tink_testrunner_BasicSuite = function(info,cases,pos) {
	this.info = info;
	this.cases = cases;
	if(info.pos == null) {
		info.pos = pos;
	}
	var _g = 0;
	while(_g < cases.length) {
		var c = cases[_g];
		++_g;
		c.suite = this;
	}
};
tink_testrunner_BasicSuite.__name__ = "tink.testrunner.BasicSuite";
tink_testrunner_BasicSuite.__interfaces__ = [tink_testrunner_SuiteObject];
tink_testrunner_BasicSuite.prototype = {
	setup: function() {
		return tink_core_Promise.NOISE;
	}
	,before: function() {
		return tink_core_Promise.NOISE;
	}
	,after: function() {
		return tink_core_Promise.NOISE;
	}
	,teardown: function() {
		return tink_core_Promise.NOISE;
	}
	,__class__: tink_testrunner_BasicSuite
};
var tink_testrunner_Timer = function() { };
tink_testrunner_Timer.__name__ = "tink.testrunner.Timer";
tink_testrunner_Timer.__isInterface__ = true;
tink_testrunner_Timer.prototype = {
	__class__: tink_testrunner_Timer
};
var tink_testrunner_TimerManager = function() { };
tink_testrunner_TimerManager.__name__ = "tink.testrunner.TimerManager";
tink_testrunner_TimerManager.__isInterface__ = true;
tink_testrunner_TimerManager.prototype = {
	__class__: tink_testrunner_TimerManager
};
var tink_testrunner_HaxeTimer = function(ms,f) {
	this.timer = haxe_Timer.delay(f,ms);
};
tink_testrunner_HaxeTimer.__name__ = "tink.testrunner.HaxeTimer";
tink_testrunner_HaxeTimer.__interfaces__ = [tink_testrunner_Timer];
tink_testrunner_HaxeTimer.prototype = {
	stop: function() {
		if(this.timer != null) {
			this.timer.stop();
			this.timer = null;
		}
	}
	,__class__: tink_testrunner_HaxeTimer
};
var tink_testrunner_HaxeTimerManager = function() {
};
tink_testrunner_HaxeTimerManager.__name__ = "tink.testrunner.HaxeTimerManager";
tink_testrunner_HaxeTimerManager.__interfaces__ = [tink_testrunner_TimerManager];
tink_testrunner_HaxeTimerManager.prototype = {
	schedule: function(ms,f) {
		return new tink_testrunner_HaxeTimer(ms,f);
	}
	,__class__: tink_testrunner_HaxeTimerManager
};
var tink_unit_Assert = function() { };
tink_unit_Assert.__name__ = "tink.unit.Assert";
tink_unit_Assert.fail = function(e,pos) {
	return tink_streams_Stream.ofError(e);
};
var tink_unit__$AssertionBuffer_Impl = function() {
	var trigger = tink_core_Signal.trigger();
	tink_streams_SignalStream.call(this,trigger);
	this.trigger = trigger;
};
tink_unit__$AssertionBuffer_Impl.__name__ = "tink.unit._AssertionBuffer.Impl";
tink_unit__$AssertionBuffer_Impl.__super__ = tink_streams_SignalStream;
tink_unit__$AssertionBuffer_Impl.prototype = $extend(tink_streams_SignalStream.prototype,{
	'yield': function(data) {
		this.trigger.handlers.invoke(data);
	}
	,__class__: tink_unit__$AssertionBuffer_Impl
});
var tink_unit_AssertionBuffer = {};
tink_unit_AssertionBuffer._new = function() {
	var this1 = new tink_unit__$AssertionBuffer_Impl();
	return this1;
};
tink_unit_AssertionBuffer.emit = function(this1,assertion) {
	this1.trigger.handlers.invoke(tink_streams_Yield.Data(assertion));
};
tink_unit_AssertionBuffer.fail = function(this1,code,reason,pos) {
	if(code == null) {
		code = reason.code;
	}
	var data = tink_streams_Yield.Fail(new tink_core_TypedError(code,reason.message,pos));
	this1.trigger.handlers.invoke(data);
	return this1;
};
tink_unit_AssertionBuffer.defer = function(this1,f) {
	tink_core_Callback.defer(f);
	return this1;
};
tink_unit_AssertionBuffer.done = function(this1) {
	this1.trigger.handlers.invoke(tink_streams_Yield.End);
	return this1;
};
tink_unit_AssertionBuffer.handle = function(this1,outcome) {
	switch(outcome._hx_index) {
	case 0:
		var _g = outcome.data;
		this1.trigger.handlers.invoke(tink_streams_Yield.End);
		break;
	case 1:
		var e = outcome.failure;
		var code = e.code;
		if(code == null) {
			code = e.code;
		}
		var data = tink_streams_Yield.Fail(new tink_core_TypedError(code,e.message,{ fileName : "tink/unit/AssertionBuffer.hx", lineNumber : 80, className : "tink.unit._AssertionBuffer.AssertionBuffer_Impl_", methodName : "handle"}));
		this1.trigger.handlers.invoke(data);
		break;
	}
};
var tink_unit_FailingReason = {};
tink_unit_FailingReason.ofString = function(e) {
	return new tink_core_TypedError(null,e,{ fileName : "tink/unit/AssertionBuffer.hx", lineNumber : 89, className : "tink.unit._AssertionBuffer.FailingReason_Impl_", methodName : "ofString"});
};
var tink_unit_TestBatch = function() { };
tink_unit_TestBatch.__name__ = "tink.unit.TestBatch";
var tink_unit_TestCase = function(info,test,timeout,include,exclude,pos) {
	this.info = info;
	this.test = test;
	this.timeout = timeout;
	this.include = include;
	this.exclude = exclude;
	this.pos = pos;
};
tink_unit_TestCase.__name__ = "tink.unit.TestCase";
tink_unit_TestCase.__interfaces__ = [tink_testrunner_CaseObject];
tink_unit_TestCase.prototype = {
	execute: function() {
		return this.test();
	}
	,__class__: tink_unit_TestCase
};
var tink_unit_TestSuiteBuilder = function() { };
tink_unit_TestSuiteBuilder.__name__ = "tink.unit.TestSuiteBuilder";
var tink_unit_TestSuiteBase = function(info,cases,pos) {
	tink_testrunner_BasicSuite.call(this,info,cases,pos);
};
tink_unit_TestSuiteBase.__name__ = "tink.unit.TestSuiteBase";
tink_unit_TestSuiteBase.__super__ = tink_testrunner_BasicSuite;
tink_unit_TestSuiteBase.prototype = $extend(tink_testrunner_BasicSuite.prototype,{
	__class__: tink_unit_TestSuiteBase
});
var tink_unit_TestSuite = function() { };
tink_unit_TestSuite.__name__ = "tink.unit.TestSuite";
var tink_unit_TestSuiteBuilder0 = function(target,name) {
	var pos = { lineNumber : 24, fileName : "test/RunTests.hx", methodName : "create_http2_server", className : "Test"};
	var tmp = new tink_unit_TestCase({ name : "create_http2_server", description : null, pos : { lineNumber : 24, fileName : "test/RunTests.hx", methodName : "create_http2_server", className : "Test"}},function() {
		var target1 = target;
		var this1 = new tink_unit__$AssertionBuffer_Impl();
		return tink_streams_Stream.ofIterator(new haxe_iterators_ArrayIterator([target1.create_http2_server(this1)]));
	},5000,false,false,pos);
	var pos = { lineNumber : 41, fileName : "test/RunTests.hx", methodName : "http2_listen", className : "Test"};
	var tmp1 = new tink_unit_TestCase({ name : "http2_listen", description : null, pos : { lineNumber : 41, fileName : "test/RunTests.hx", methodName : "http2_listen", className : "Test"}},function() {
		var target1 = target;
		var this1 = new tink_unit__$AssertionBuffer_Impl();
		return tink_streams_Stream.ofIterator(new haxe_iterators_ArrayIterator([target1.http2_listen(this1)]));
	},5000,false,false,pos);
	var pos = { lineNumber : 50, fileName : "test/RunTests.hx", methodName : "wait_for_request", className : "Test"};
	var tmp2 = new tink_unit_TestCase({ name : "wait_for_request", description : null, pos : { lineNumber : 50, fileName : "test/RunTests.hx", methodName : "wait_for_request", className : "Test"}},function() {
		var target1 = target;
		var this1 = new tink_unit__$AssertionBuffer_Impl();
		return target1.wait_for_request(this1);
	},100000,false,false,pos);
	tink_unit_TestSuiteBase.call(this,{ name : name == null ? "Test" : name, pos : { lineNumber : 18, fileName : "test/RunTests.hx", methodName : null, className : "Test"}},[tmp,tmp1,tmp2],{ fileName : "tink/unit/TestBuilder.hx", lineNumber : 130, className : "tink.unit.TestSuiteBuilder0", methodName : "new"});
	this.target = target;
};
tink_unit_TestSuiteBuilder0.__name__ = "tink.unit.TestSuiteBuilder0";
tink_unit_TestSuiteBuilder0.__super__ = tink_unit_TestSuiteBase;
tink_unit_TestSuiteBuilder0.prototype = $extend(tink_unit_TestSuiteBase.prototype,{
	__class__: tink_unit_TestSuiteBuilder0
});
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
js_Boot.__toStr = ({ }).toString;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
haxe_ds_ObjectMap.count = 0;
ANSI.ESCAPE = "\x1B";
ANSI.BELL = "\x07";
ANSI.CSI = "\x1B" + "[";
ANSI.attr = Attribute;
ANSI.values = (function($this) {
	var $r;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(Attribute.Off,0);
	_g.set(Attribute.Bold,1);
	_g.set(Attribute.Underline,4);
	_g.set(Attribute.Blink,5);
	_g.set(Attribute.ReverseVideo,7);
	_g.set(Attribute.Concealed,8);
	_g.set(Attribute.BoldOff,22);
	_g.set(Attribute.UnderlineOff,24);
	_g.set(Attribute.BlinkOff,25);
	_g.set(Attribute.NormalVideo,27);
	_g.set(Attribute.ConcealedOff,28);
	_g.set(Attribute.Black,30);
	_g.set(Attribute.Red,31);
	_g.set(Attribute.Green,32);
	_g.set(Attribute.Yellow,33);
	_g.set(Attribute.Blue,34);
	_g.set(Attribute.Magenta,35);
	_g.set(Attribute.Cyan,36);
	_g.set(Attribute.White,37);
	_g.set(Attribute.DefaultForeground,39);
	_g.set(Attribute.BlackBack,40);
	_g.set(Attribute.RedBack,41);
	_g.set(Attribute.GreenBack,42);
	_g.set(Attribute.YellowBack,43);
	_g.set(Attribute.BlueBack,44);
	_g.set(Attribute.MagentaBack,45);
	_g.set(Attribute.CyanBack,46);
	_g.set(Attribute.WhiteBack,47);
	_g.set(Attribute.DefaultBackground,49);
	$r = _g;
	return $r;
}(this));
ANSI.set = Reflect.makeVarArgs(ANSI.aset);
ANSI.available = ANSI.detectSupport();
ANSI.strip = false;
ANSI.stripIfUnavailable = true;
ANSI.sequences = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["eraseDisplayToEnd"] = { val : "\x1B" + "[" + "J", doc : "Erase from cursor to the end of display."};
	_g.h["eraseDisplayToCursor"] = { val : "\x1B" + "[" + "1J", doc : "Erase from the start of diplay to cursor (inclusive)."};
	_g.h["eraseDisplay"] = { val : "\x1B" + "[" + "2J", doc : "Erase display and move cursor to the top-left."};
	_g.h["eraseLineToEnd"] = { val : "\x1B" + "[" + "K", doc : "Erase from cursor to the end of line."};
	_g.h["eraseLineToCursor"] = { val : "\x1B" + "[" + "1K", doc : "Erase from the start of line to cursor (inclusive)."};
	_g.h["eraseLine"] = { val : "\x1B" + "[" + "2K", doc : "Erase line."};
	_g.h["eraseChar"] = { val : "\x1B" + "[" + "X", doc : "Erase one character."};
	_g.h["eraseChars"] = { val : "\x1B" + "[" + "#X", doc : "Erase # characters."};
	_g.h["insertLine"] = { val : "\x1B" + "[" + "L", doc : "Insert one blank line."};
	_g.h["insertLines"] = { val : "\x1B" + "[" + "#L", doc : "Insert # blank lines."};
	_g.h["deleteLine"] = { val : "\x1B" + "[" + "M", doc : "Delete one line."};
	_g.h["deleteLines"] = { val : "\x1B" + "[" + "#M", doc : "Delete # lines."};
	_g.h["deleteChar"] = { val : "\x1B" + "[" + "P", doc : "Delete one character."};
	_g.h["deleteChars"] = { val : "\x1B" + "[" + "#P", doc : "Delete # characters."};
	_g.h["insertChar"] = { val : "\x1B" + "[" + "@", doc : "Insert one blank character."};
	_g.h["insertChars"] = { val : "\x1B" + "[" + "#@", doc : "Insert # blank characters."};
	_g.h["moveUp"] = { val : "\x1B" + "[" + "#A", doc : "Move cursor up # lines."};
	_g.h["moveDown"] = { val : "\x1B" + "[" + "#B", doc : "Move cursor down # lines."};
	_g.h["moveRight"] = { val : "\x1B" + "[" + "#C", doc : "Move cursor right # characters."};
	_g.h["moveLeft"] = { val : "\x1B" + "[" + "#D", doc : "Move cursor left # characters."};
	_g.h["moveDownReset"] = { val : "\x1B" + "[" + "#E", doc : "Move cursor down # lines and to first column."};
	_g.h["moveUpReset"] = { val : "\x1B" + "[" + "#F", doc : "Move cursor up # lines and to first column."};
	_g.h["setX"] = { val : "\x1B" + "[" + "#G", doc : "Move cursor to column #."};
	_g.h["setY"] = { val : "\x1B" + "[" + "#d", doc : "Move cursor to line #."};
	_g.h["reset"] = { val : "\x1B" + "[" + "H", doc : "Move cursor to top-left."};
	_g.h["resetY"] = { val : "\x1B" + "[" + "#H", doc : "Move cursor to line # and first column."};
	_g.h["setXY"] = { val : "\x1B" + "[" + "#;#H", doc : "Move cursor to line #, column #.", params : [{ index : 1, name : "column"},{ index : 0, name : "line"}]};
	_g.h["saveCursor"] = { val : "\x1B" + "[" + "s", doc : "Save cursor position."};
	_g.h["loadCursor"] = { val : "\x1B" + "[" + "u", doc : "Move cursor to saved position."};
	_g.h["showCursor"] = { val : "\x1B" + "[" + "?25h", doc : "Show cursor."};
	_g.h["hideCursor"] = { val : "\x1B" + "[" + "?25l", doc : "Hide cursor."};
	$r = _g;
	return $r;
}(this));
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core_Future.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core_Future.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_Lazy.NULL = new tink_core__$Lazy_LazyConst(null);
tink_core_Progress.INIT = (function($this) {
	var $r;
	var this1 = new tink_core_MPair(0.0,haxe_ds_Option.None);
	$r = this1;
	return $r;
}(this));
tink_core_Promise.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core_Promise.NEVER = (function($this) {
	var $r;
	var ret = tink_core_Future.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
tink_streams_Empty.inst = new tink_streams_Empty();
tink_unit_Assert.printer = new haxe_macro_Printer();
RunTests.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
